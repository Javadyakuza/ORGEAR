pragma ever-solidity >=0.61.2;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./structures/ProposalConfigurationStructure.tsol";
import "./structures/ProposalActionStruct.tsol";
import "./structures/DAOBranchConfigurationStruct.tsol";
import "./helpers/ProposalInitialCheck.tsol";
import "./interfaces/IProposal.tsol";
import "./interfaces/IDAOBranch.tsol";
import "tip3vote/contracts/interfaces/IVoteTokenWallet.tsol";
import "tip3vote/contracts/interfaces/IVoteTokenRoot.tsol";
import "tip3vote/contracts/VoteTokenWallet.tsol";
import "./Proposal.tsol";
import "./libraries/Gas.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";


contract DAOBranch is ProposalConfigurationStructure, DAOBranchConfigurationStruct, Action, ProposalInitialCheck, IDAOBranch {

  event ProposalDeployed(address _proposer, address _proposal, uint256 proposalId, string description);
  event ProposaDeployFailed(address _proposer, uint256 _futuredProposalId, TvmCell Payload);
  event AdminTransferRequest(address _oldAdmin, address _newAdmin);
  event AdminTransfered(address _oldAdmin, address _newAdmin);
  event DAOBranchPrefrencesChanged();

  // static //
  uint32 static _nonce;
  address static admin;
  address static DaoRoot;
  // static //

  // the constant variables are wrapped into a struct see {"DAOBranchConfiguarationStruct.tsol"}.

  // normal //

  address public pendingAdmin;
  uint256 public totalProposals;
  TvmCell public ProposalCode;
  TvmCell public Tip3VoteWalletCode;
  DaoBranchConfig public BranchConfig;

  // normal //

  constructor(DaoBranchConfig _BranchConfig,TvmCell _proposalCode, TvmCell _tip3VoteWalletCode) public {
    require(msg.sender == DaoRoot, DaoErrors.NOT_ROOT);
    // initializing the state variabls
    ProposalCode = _proposalCode;
    Tip3VoteWalletCode = _tip3VoteWalletCode;
    BranchConfig = _BranchConfig;
  }

  modifier onlyAdmin() {
    require(msg.sender == admin, 103);
    _;
  }
  modifier onlyProposal(uint256 _proposalId) {
    require(msg.sender == expectedProposalAddress(_proposalId), DaoErrors.NOT_PROPOSAL);
    _;
  }


  ///@notice the proposal expected address will be calculated from  a postion id wich is totalProposals + 1 
  function propose(ProposalInitConfiguration _ProposalInitConfiguration, VenomActions[] _venomActions) public override internalMsg{
    // cheking if the user has provided enough venom for deploying and actioning the proposal  
    /// @dev Gas.MAIN_VALUE in here is the value for deploying the proposal  
    require(msg.value >= _venomActionTotalValue(_venomActions) + Gas.MAIN_VALUE, DaoErrors.MSG_VALUE_TOO_LOW_TO_CREATE_PROPOSAL);
    // reserving the contract balance to not be spent on this trnasaction
    tvm.rawReserve(0,4); 
    // cheking the deploying params
    uint8 paramsRes = checkParams(BranchConfig, _ProposalInitConfiguration, _venomActions, msg.sender);
    require(paramsRes == uint8(200), paramsRes);

    TvmCell payload = abi.encode(_ProposalInitConfiguration,_venomActions,msg.sender);

    if(msg.sender == admin){
      deployProposal(0, payload);
    }else{
      // sending the proposal data to the tip3 vote token 
      // the flag in here must be set to 1 and the expected operation too
      IVoteTokenWallet(expectedTip3VoteWalletAddress(msg.sender)).getVotes{
        value : 0, 
        flag : MsgFlag.ALL_NOT_RESERVED,
        callback : deployProposal
      }(payload);
    }
  }
  function deployProposal( uint256 _balance, TvmCell _payload) public override internalMsg {
    // unpacking the tvm cell 
    (ProposalInitConfiguration _ProposalConf, VenomActions[] _venomActions, address _proposer)
                = abi.decode(_payload, (ProposalInitConfiguration, VenomActions[], address));   
    require(msg.sender == admin || msg.sender == expectedTip3VoteWalletAddress(_proposer), DaoErrors.NOT_ADMIN_OR_VOTE_WALLET);

    // checking if the sender has the enough value to deploy the porposal 
      if (_balance < BranchConfig.TIP3_VOTE_PROPPOSING_QUORUM && msg.sender != admin){
        // user is not admin and doesnt have the quorum token neither
        emit ProposaDeployFailed(_proposer, totalProposals + 1, _payload);
        revert(DaoErrors.TIP3_VOTE_TOO_LOW_TO_CREATE_PROPOSAL);
      }
    
    // deploying the contract
    address proposalAddr = new Proposal{
      stateInit: _buildProposalStateInit(totalProposals + 1),
      value: 0, // it must be somhow the sender in the prropose function  
      flag: TokenMsgFlag.ALL_NOT_RESERVED
    }(
      _ProposalConf,
      _venomActions,
      msg.sender // msg sender checked
    );
    // adding one to the total proposals the totalProposals
    emit ProposalDeployed(_proposer, proposalAddr, totalProposals + 1, _ProposalConf.description);
    totalProposals++;
  }

  // this  function is used to perfomrm the planned operation in case a proposal is approved and has got the votes
  function onProposalSucceeded(VenomActions[] _venomActions, uint256 _proposalId) public override view onlyProposal(_proposalId){
    // checking that the proposal has provided tha excuting amount 
    /// @dev the msg value is payed by the proposal balance which is charged at the deploying time 
    require(msg.value >= _venomActionTotalValue(_venomActions), DaoErrors.VALUE_TOO_LOW);
    // saving the contract value
    tvm.rawReserve(0, 4); // flag 0 saves exactly the amount in the reserve
    // actioning the actions !
    for (uint i = 0 ; i < _venomActions.length; i++){
      _venomActions[i].target.transfer({
        value: uint128(_venomActions[i].value), 
        bounce: false,
        flag: MsgFlag.SENDER_PAYS_FEES,
        body : _venomActions[i].payload
        });
    }
  IProposal(expectedProposalAddress(_proposalId)).onActionsExecuted{
      value:0, 
      flag: MsgFlag.ALL_NOT_RESERVED
    }();
  }

  function _buildProposalStateInit(uint256 _proopsalId) private view returns (TvmCell initData_) {
    return
      tvm.buildStateInit({
        code: ProposalCode,
        contr: Proposal,
        varInit: { PROPOSAL_ID: _proopsalId, DaoBranchAddress: address(this) }
      });
  }

  // -- get funcs -- // 
  function expectedProposalAddress(uint256 _proposalId) public override view returns (address expectedProposalAddress_) {
    return address(tvm.hash(_buildProposalStateInit(_proposalId)));
  }
  function expectedTip3VoteWalletAddress(address _walletOwner) public override view returns (address expectedTip3WalletAddress_) {
    return address(tvm.hash(
         tvm.buildStateInit({
            contr: VoteTokenWallet,
            varInit: {
                root_: BranchConfig.TIP3_VOTE_ROOT_ADDRESS,
                owner_: _walletOwner
            },
            pubkey: 0,
            code: Tip3VoteWalletCode
        }))); 
  }
  function getAdmin() public override view returns (address admin_) {
    return admin;
  }
  function getDAOBranchConfig() public override view returns (DaoBranchConfig DAOBranchConfig_) {
    return BranchConfig;
  }
  function getTotalProposals() public override view returns (uint256 totalProposal_) {
    return totalProposals;
  }
  function _venomActionTotalValue(VenomActions[] _venomActions) public override pure returns(uint256 totalValue_){
    // this function fee is payed by previous func
    uint256 totalValue = 0;
    for (uint i = 0; i < _venomActions.length; i++) {
      /// @dev Gas.MAIN_VALUE in here is the value for excuting 
      totalValue += _venomActions[i].value + Gas.MAIN_VALUE;
    }
    return totalValue;
  } 
  // -- get funcs -- // 
  // -- ADMIN FUNCTION -- //
  function changeAdmin(address _newAdmin) public override onlyAdmin {
    tvm.accept();
    // emiting the event
    emit AdminTransferRequest(msg.sender, _newAdmin);
    // adding the requested admin to the pendingAdmin
    pendingAdmin = _newAdmin;
    
  }

  function acceptBeingAdmin() public override {
    // checking that hte pedingAdmin is calling and has attahced the value to pay the gas fees
    require(msg.sender == pendingAdmin && msg.value >= Gas.MAIN_VALUE, DaoErrors.NOT_PENDING_ADMIN);
    // saving the contract value 
    tvm.rawReserve(0, 4);
    // emiting the event
    emit AdminTransfered(admin, pendingAdmin);
    // setting the new admin
    admin = pendingAdmin;
    // deleting the pemding admin
    pendingAdmin = address(0);
    // trannnfering the rest of the gas fees to the admin(newAdmin is that pending adnin that we just setted )
    admin.transfer({ value: 0, flag: MsgFlag.REMAINING_GAS });
  }

  function changeDAOBranchprefrences(DaoBranchConfig _BranchConfig) public override onlyAdmin {
    // this contract is patying for the state changing since the admin is calling 
    tvm.accept();
    // emiting the event
    emit DAOBranchPrefrencesChanged();
    // setting the new ones
    BranchConfig = _BranchConfig;
  }
  // -- ADMIN FUNCTION -- //

}
