pragma ton-solidity >= 0.57.0;

import "tip3/contracts/libraries/TokenErrors.sol";
import "tip3/contracts/libraries/TokenGas.sol";
import "tip3/contracts/libraries/TokenMsgFlag.sol";
import "tip3/contracts/interfaces/IVersioned.sol";

import "./TokenRootBase.sol";

import "../structures/ICheckPointStructure.tsol";
import "../interfaces/IVoteTokenRoot.tsol";

abstract contract VoteTokenRootBase is TokenRootBase,
    ICheckPointStructure,
    IVoteTokenRoot{

    Checkpoint[] private _checkpoints;
    /**
     * @dev Gets the current votes balance of this wallet
     */
    function getTotalSupply() override public view responsible returns (uint256) {
        uint256 pos = _checkpoints.length;
        return {value: 0, bounce: false, flag: 64} pos == 0 ? 0 : _checkpoints[pos - 1].votes;
    }

    /**
     * @dev Retrieve the number of votes for this wallet at the end of `blockNumber`.
     *
     * Requirements:
     *
     * - `blockNumber` must have been already mined
     */
    function getPastTotalSupply(uint256 blockTimestamp) override public view responsible returns (uint256) {
        require(blockTimestamp < block.timestamp, 1002);// "TIP3Votes: block not yet mined"
        return {value: 0, bounce: false, flag: 64} _checkpointsLookup(_checkpoints,blockTimestamp);
    }
    /**
     * @dev Lookup a value in a list of (sorted) checkpoints.
     */
    function _checkpointsLookup(Checkpoint[] ckpts, uint256 blockTimestamp) private pure returns (uint256) {
        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.
        //
        // Initially we check if the block is recent to narrow the search range.
        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).
        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.
        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)
        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)
        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not
        // out of bounds (in which case we're looking too far in the past and the result is 0).
        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is
        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out
        // the same.
        uint256 length = ckpts.length;

        uint256 low = 0;
        uint256 high = length;
        while (low < high) {
            uint256 mid = (low + high)/2;
            if (ckpts[mid].fromBlock > blockTimestamp) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        return high == 0 ? 0 : ckpts[high - 1].votes;
    }
    function _changeTotalSupply(uint128 newTotalSupply) override internal {
        totalSupply_ = newTotalSupply; 
        _addCheckpoint(newTotalSupply);
    }
    function _addCheckpoint(uint128 totalSupply) private {
        Checkpoint x = Checkpoint({votes:totalSupply,fromBlock:block.timestamp});
        _checkpoints.push(x);
    }
}