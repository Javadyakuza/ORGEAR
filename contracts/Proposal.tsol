pragma ever-solidity >=0.61.2;

import "./structures/ProposalActionStruct.tsol";
import "./structures/ProposalConfigurationStructure.tsol";
import "./structures/ProposalStates.tsol";
import "./interfaces/IProposal.tsol";
import "./interfaces/IDAOBranch.tsol";
import "tip3vote/contracts/interfaces/IVoteTokenWallet.tsol";
import "tip3vote/contracts/interfaces/IVoteTokenRoot.tsol";
import "tip3vote/contracts/VoteTokenWallet.tsol";
import "./libraries/DAOErrors.tsol";
import "./libraries/Gas.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";

contract Proposal is  ProposalConfigurationStructure, Action, ProposalStates, IProposal{
  // static //
  uint256 public static PROPOSAL_ID;
  address public static DaoBranchAddress;
  // static //

  event VoteCasted(address voter, bool support, uint votes, string reason);
  event Queueed(uint256 executionTime);
  event Executed();
  event Canceled();
  event ProposerFundedBack(address _proposer, uint256 _amount);

  VenomActions[] public venomActions;
  ProposalInitConfiguration public initConfig;
  ProposalState public state;
  uint256 public creationBlockTS;
  address public proposer;

  constructor(
    ProposalInitConfiguration _initConfig, 
    VenomActions[] _venomActions,
    address _proposer
  ) public {
    initConfig = _initConfig;
    venomActions = _venomActions;
    creationBlockTS = block.timestamp;
    proposer = _proposer;
  }

  // set function //
  /**
  @notice this function support the delegate voting by getting the voter  
   */
  function vote(bool _support, string _reason, /*will be removed in productioin */ uint128 nowTime) public override internalMsg view{
    require(getProposalState(nowTime) == ProposalState.Active, DaoErrors.PROPOSAL_IS_NOT_ACTIVVE);
    tvm.rawReserve(0,4);
    // packing the data 
    TvmCell votePayload = abi.encode(msg.sender, _support, _reason);

    // calling the expected tip3 vote wallet to return the past votes for us 
    IVoteTokenWallet(_expectedTip3VoteWalletAddress(msg.sender)).getPastVotes{
      value : 0 ,
      flag : MsgFlag.ALL_NOT_RESERVED,
      callback : castVote
    }(creationBlockTS, votePayload); 
  }
  function castVote(uint256 _balance, TvmCell _votePayload) public override internalMsg { 
    // checking that state is active 
    // unpacking the data 
    (address _voter, bool _support, string _reason) 
              = abi.decode(_votePayload,(address, bool, string));
    // checking the vpte weight is greater than 0 
    require(_balance != 0 , DaoErrors.VALUE_ZERO);
    // casting the vote 
    if (_support) {
        initConfig.forVotes += _balance;
        } else {
        initConfig.againstVotes += _balance;
        }
        emit VoteCasted(_voter, _support, _balance, _reason);

    } 
  // queue the proposal means that propoposal is ready to be excuited and was successfull
  function Queue(/*will be removed in productioin */ uint128 nowTime) public override internalMsg{
    // checking if the positioin was successfull or not 
    require(getProposalState(nowTime) == ProposalState.Succeeded, DaoErrors.PROPOSAL_IS_NOT_SUCCEEDED);
    // accepting puuting the proposal state in queue fees
    tvm.accept();
    // putting the end time plus the time lock as the excution time 
    initConfig.executionTime = initConfig.endTime + initConfig.timeLock;
    // changing the proposal state
    state = ProposalState.Queued; 
    // emiting the event 
    emit Queueed(initConfig.executionTime);
  }
  // this func call the "onProposalSuccess" fiunction on the dao root 
  /// @notice payer : this   
  function execute(/*will be removed in productioin */ uint128 nowTime) public override internalMsg{
    // checking the state of the proopsal is queued 
    require(getProposalState(nowTime) == ProposalState.Queued, DaoErrors.PROPOSAL_IS_NOT_QUEUED);
    // cheking that the its the time to execute the contrac, the execution time must be greater that now time  PROPOSAL_IS_NOT_SUCCEEDED
    require(block.timestamp >= initConfig.executionTime, DaoErrors.EXECUTION_TIME_NOT_COME_YET);
    // accepting the fees 
    tvm.accept();
    // toggling the initCinfig excuted to true 
     initConfig.executed = true ;
     // changing the contract state 
     state = ProposalState.Executed;
     // emiting the event 
     emit Executed();
     // excuting the contract from the dao root channel 
     IDAOBranch(DaoBranchAddress).onProposalSucceeded{
      value : 0, 
      flag : MsgFlag.ALL_NOT_RESERVED
     }(venomActions, PROPOSAL_ID);

  }

  // this function cancells the proposal
  /// @notice payer : sender   
  function cancell() public override internalMsg{
    // cheking that the sender hsa attached enogh venom to change the state 
    /// @dev Gas.MAIN_VALUE is the state change basically 
    require(msg.value >= Gas.MAIN_VALUE, DaoErrors.VALUE_TOO_LOW);
    // saving the contract value 
    tvm.rawReserve(0, 4);
    // chaking that the proposer is calling this function 
    require(msg.sender == proposer, DaoErrors.NOT_OWNER);
    // checking that the contract is not excuted yet 
    require(!initConfig.executed, DaoErrors.PROPOSAL_IS_EXECUTED);
    // toggling the cancell to true 
    initConfig.canceled = true ;
    // emitng the event reffering to that 
    emit Canceled();

  }

  function onActionsExecuted() public override view {
        // only dao can call his function 
        require(msg.sender == DaoBranchAddress, DaoErrors.NOT_DAO);
        // saving the inital balance of the contract Gas.MAIN_VALUE, : inital balance 
        tvm.rawReserve(Gas.MAIN_VALUE, 2);
        // emiting a event 
        emit ProposerFundedBack(proposer, address(this).balance - Gas.MAIN_VALUE);
        // transfering all the remaining balance to the proposers
        proposer.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED});
  }
  function _expectedTip3VoteWalletAddress(address _walletOwner) private view returns (address expectedTip3WalletAddress_) {
    return address(tvm.hash(
         tvm.buildStateInit({
            contr: VoteTokenWallet,
            varInit: {
                root_: initConfig.TIP3_VOTE_ROOT_ADDRESS,
                owner_: _walletOwner
            },
            pubkey: 0,
            code: initConfig.Tip3VoteWalletCode
        }))); 
  }  // set function //

  // get funcs 
  function getPorosposalOverview(/*will be removed in productioin */ uint128 nowTime) public override view returns (ProposalInitConfiguration initConf_, ProposalState states_){
        return (initConfig, getProposalState(nowTime));
  } 
  function getActions() public override view returns (VenomActions[]  venomActions_){
      return venomActions;
  }
  function getProposalState(/*will be removed in productioin */ uint128 nowTime) public override view returns (ProposalState state_){
        if (initConfig.canceled) {
          // returns the cencelled if the inti config struct cancelled was true 
            return ProposalState.Canceled;
        } else if (initConfig.executed) {
          // returnexcuted if the init config file excuted was true
            return ProposalState.Executed;
        } else if (nowTime <= initConfig.startTime) {
          // return pending if the init config file start time was freater than block.timestamp time
            return ProposalState.Pending;
        } else if (nowTime <= initConfig.endTime) {
            // return the active if the block.timestamp time was less than the end time from the iitconfig struct 
            return ProposalState.Active;
        } else if (initConfig.forVotes <= initConfig.againstVotes || initConfig.forVotes < initConfig.quorumVotes) {
          // return failed if for votes were lees than or eq to against votes OR for votes were less than qourom votes
            return ProposalState.Failed;
        } else if (initConfig.executionTime == 0) {
          // return succesdded if the execution time was zero , why ?
            return ProposalState.Succeeded;
        } else if (nowTime > initConfig.executionTime + initConfig.gracePeriod) {
            // return expired if the excution time plus grace periosd time were less thatn now time 
            return ProposalState.Expired;
        } else {
          // if none above condition met , rerturn queue which means that proposal is waiting t be excuted
            return ProposalState.Queued;
        }
    }
 // get funcs 
}
