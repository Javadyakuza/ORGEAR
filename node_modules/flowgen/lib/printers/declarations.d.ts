import * as ts from "typescript";
import type Node from "../nodes/node";
export declare const propertyDeclaration: (node: ts.VariableDeclaration | ts.PropertyDeclaration, keywordPrefix: string) => string;
export declare const variableDeclaration: (node: ts.VariableStatement) => string;
export declare const interfaceType: <T>(node: ts.InterfaceDeclaration | ts.ClassDeclaration | ts.TypeLiteralNode, nodeName: string, mergedNamespaceChildren: readonly Node<T>[], withSemicolons?: boolean, isType?: boolean) => string;
export declare const interfaceDeclaration: (nodeName: string, node: ts.InterfaceDeclaration, modifier: string) => string;
export declare const typeDeclaration: (nodeName: string, node: ts.TypeAliasDeclaration, modifier: string) => string;
export declare const enumDeclaration: (nodeName: string, node: ts.EnumDeclaration) => string;
export declare const typeReference: (node: ts.TypeReferenceNode, identifier: boolean) => string;
export declare const classDeclaration: <T>(nodeName: string, node: ts.ClassDeclaration, mergedNamespaceChildren: readonly Node<T>[]) => string;
