pragma ever-solidity >= 0.61.2;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./DAOBranch.tsol";
import "./libraries/DAOErrors.tsol";
import "./interfaces/IDAOBranch.tsol";
import "./interfaces/IDAORoot.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "./libraries/Gas.tsol";
import "./structures/DAOBranchConfigurationStruct.tsol";

contract DAORoot is DAOBranchConfigurationStruct, IDAORoot{

    event newBranchDepoyed(address _branchAddress, address _admin);
    event DAORootAdminTransferreq(address _oldAdmin, address _newAdmin);
    event DAORootAdminTransfered(address _oldAdmin, address _newAdmin);
    event DAOBranchCodeUpdated();

    address static admin;
    uint32 static _nonce;

    TvmCell public DaoBranchCode;
    uint256 public TotalDaoBranches;
    address public pendingAdmin;

    constructor(TvmCell _DaoBranchCode) public {
        require(tvm.pubkey() == msg.pubkey(), DaoErrors.NOT_ADMIN);
        tvm.accept();
        DaoBranchCode = _DaoBranchCode;
    }

    modifier onlyAdmin () {
        require(msg.sender == admin , DaoErrors.NOT_ADMIN);
        _;
    } 

    // this function deploys A dao Branch
    function DeployDaoBranch(uint32 _branchNonce, DaoBranchConfig _DaoBranchConfig) public override internalMsg{
        // chaking the msg.value 
        require(msg.value >= Gas.MAIN_VALUE, DaoErrors.VALUE_TOO_LOW);
        // reserving the contract value 
        tvm.rawReserve(0, 4);
        // deploying the branch 
        address branchAddr = new DAOBranch {
            stateInit : _buildDaoBranchStatInit(_branchNonce, msg.sender),
            value : 0,
            flag : MsgFlag.ALL_NOT_RESERVED
        }(
            _DaoBranchConfig
        );
        emit newBranchDepoyed(branchAddr, msg.sender);
        TotalDaoBranches++;
    }

    // -- admin functions -- //
    // this function chages the DaoBranch code 
    function updateDaoBranchCode(TvmCell _DaoBranchCode) public onlyAdmin override {
        // in the octus we hade the onCodeChage handler but i don't see any resson to apply this here
        tvm.accept();
        // emotitng the event 
        emit DAOBranchCodeUpdated();
        // setting the stae variable
        DaoBranchCode = _DaoBranchCode;
    }

    function transferAdmin(address _newAdmin) public onlyAdmin override {
        // accepting to pay the fees
        tvm.accept();
        // emiting the vent 
        emit DAORootAdminTransferreq(admin , _newAdmin);
        // setting the stte variable
        pendingAdmin = _newAdmin;
    }
    function acceptBeingAdmin() public override{
        // checking f the pending admin is calling 
        require(msg.sender == pendingAdmin , DaoErrors.NOT_PENDING_ADMIN);
        // reserving the contract value , the incomming message must be flag : 1 or this func will fail 
        tvm.rawReserve(0, 4);
        // emiting the event 
        emit DAORootAdminTransfered(admin , msg.sender);
        // setting the state variables
        pendingAdmin = address(0);
        admin = msg.sender;
        admin.transfer({value: 0, flag : MsgFlag.REMAINING_GAS});
    }
    // -- admin functions -- //

    // -- get function -- //
    function getAdmin() public override view returns(address admin_){
        return admin;
    }
        // this function calculates the daoranch address 
    function expectedDaoBranchAddress (uint32 _nonce_, address _admin_) public override view returns(address){
        return address(tvm.hash(_buildDaoBranchStatInit(_nonce_, _admin_)));
    }

    function _buildDaoBranchStatInit(uint32 _nonce_, address _admin_) private view returns(TvmCell){
        return tvm.buildStateInit({
            contr: DAOBranch,
            varInit: {
                _nonce: _nonce_,
                admin: _admin_,
                DaoRoot : address(this)
            },
            pubkey: 0,
            code: DaoBranchCode
        });
    }
    // -- get function -- //

 }